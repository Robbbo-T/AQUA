# Quantum Hardware Discovery Configuration
# AQUA OS Quantum Detection and Initialization

# Detection parameters
detection:
  timeout_milliseconds: 10000
  retry_attempts: 5
  fallback_to_classical: true
  log_detection_attempts: true
  
# Quantum Processing Unit (QPU) detection
qpu_detection:
  enabled: true
  
  # Supported QPU vendors and their detection methods
  vendors:
    ibm:
      detection_method: "qiskit_runtime"
      api_endpoint: "https://auth.quantum-computing.ibm.com/api"
      min_qubits: 27
      required_gates: ["cx", "u3", "measure"]
      
    google:
      detection_method: "cirq_google"
      service_account_path: "/etc/aqua/quantum/google-quantum-service.json"
      min_qubits: 53
      required_gates: ["syc", "sqrt_iswap", "measure"]
      
    rigetti:
      detection_method: "pyquil"
      api_endpoint: "https://api.rigetti.com"
      min_qubits: 32
      required_gates: ["rx", "rz", "cz", "measure"]
      
    ionq:
      detection_method: "ionq_api"
      api_endpoint: "https://api.ionq.co"
      min_qubits: 32
      all_to_all_connectivity: true
      
    # Generic/Local QPU detection
    local:
      detection_method: "pci_scan"
      pci_vendor_ids: ["0x1AE0", "0x8086", "0x1414"]  # Common quantum hardware vendors
      device_drivers: ["qpu_generic", "quantum_accelerator"]

# Quantum Key Distribution (QKD) detection
qkd_detection:
  enabled: true
  
  protocols:
    bb84:
      hardware_support: true
      detection_method: "photon_detector_scan"
      min_key_rate: 1000  # bits per second
      
    e91:
      hardware_support: true
      entanglement_source_required: true
      bell_inequality_test: true
      
    sarg04:
      hardware_support: true
      four_state_support: true
      
  hardware_interfaces:
    - "fiber_optic"
    - "free_space_optical"
    - "satellite_qkd"
    
  security_requirements:
    authentication: "post_quantum"
    integrity_check: "quantum_hash"
    replay_protection: true

# Quantum Random Number Generator (QRNG) detection
qrng_detection:
  enabled: true
  
  entropy_sources:
    shot_noise:
      detection_method: "photodiode_scan"
      min_entropy_rate: 1000000  # bits per second
      
    quantum_vacuum:
      detection_method: "homodyne_detector"
      vacuum_state_verification: true
      
    quantum_dots:
      detection_method: "semiconductor_scan"
      tunneling_current_noise: true
      
  validation:
    nist_randomness_tests: true
    entropy_estimation: "min_entropy"
    continuous_monitoring: true

# Quantum sensors detection
quantum_sensors:
  enabled: true
  
  magnetometer:
    technology: ["squid", "nv_center", "atomic_vapor"]
    sensitivity: 1e-15  # Tesla
    detection_method: "magnetic_field_scan"
    
  gravimeter:
    technology: ["atomic_interferometer", "superconducting"]
    sensitivity: 1e-9   # g
    detection_method: "gravitational_gradient"
    
  accelerometer:
    technology: ["atomic_interferometer"]
    sensitivity: 1e-12  # m/sÂ²
    detection_method: "inertial_measurement"
    
  gyroscope:
    technology: ["atom_interferometer", "nuclear_magnetic_resonance"]
    sensitivity: 1e-11  # rad/s
    detection_method: "rotation_sensing"

# Quantum networking detection
quantum_networking:
  enabled: true
  
  quantum_internet:
    protocols: ["quantum_tcp", "qkd_mesh"]
    entanglement_distribution: true
    quantum_repeaters: true
    
  quantum_satellite:
    ground_station_detection: true
    satellite_qkd_support: true
    global_quantum_network: true

# Detection algorithms
detection_algorithms:
  parallel_detection: true
  hardware_fingerprinting: true
  quantum_benchmarking: true
  
  benchmarks:
    quantum_volume: true
    gate_fidelity: true
    coherence_time: true
    crosstalk_measurement: true
    
# Fallback and error handling
fallback:
  classical_simulation: true
  software_quantum_emulation: true
  hybrid_mode_degradation: true
  
  error_handling:
    detection_failure: "log_and_continue"
    hardware_timeout: "fallback_classical"
    incompatible_hardware: "disable_quantum"
    
# Integration with AQUA frameworks
framework_integration:
  cqea:
    quantum_extension_discovery: true
    classical_baseline_verification: true
    adaptive_switching: true
    
  wee:
    hardware_learning: true
    performance_optimization: true
    capability_evolution: true
    
  amores:
    quantum_safety_validation: true
    regulatory_compliance_check: true
    certification_evidence: true
    
  demos:
    hardware_modeling: true
    performance_prediction: true
    digital_twin_integration: true

# Logging and debugging
logging:
  detection_log: "/var/log/aqua/quantum-detection.log"
  hardware_log: "/var/log/aqua/quantum-hardware.log"
  benchmark_log: "/var/log/aqua/quantum-benchmarks.log"
  error_log: "/var/log/aqua/quantum-errors.log"
  
  log_levels:
    detection: "debug"
    hardware: "info"
    benchmarks: "info"
    errors: "verbose"

# Certification and compliance
certification:
  do178c_compliance: true
  quantum_safety_assessment: true
  hardware_validation_evidence: true
  
  documentation:
    detection_report: "/var/lib/aqua/reports/quantum-detection.pdf"
    hardware_inventory: "/var/lib/aqua/reports/quantum-inventory.json"
    compliance_matrix: "/var/lib/aqua/reports/quantum-compliance.xlsx"